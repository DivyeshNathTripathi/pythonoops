# -*- coding: utf-8 -*-
"""pythonopps1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cR2BghLev0946svzcdFERAKuzCL1IYlW

Q1. Explain Class and Object with respect to Object-Oriented Programming. Give a suitable example.

**Answer** :
**Class**: A class is a blueprint for creating objects. It defines the attributes (data) and methods (functions) that the objects created from the class will have.

**Object**: An object is an instance of a class. It is a real-world entity that has a unique identity, properties (attributes), and behavior (methods).
**Example**
"""

class Car:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    def display_info(self):
        return f"Brand: {self.brand}, Model: {self.model}"

# Create an object
my_car = Car("Toyota", "Corolla")
print(my_car.display_info())

"""Q2. Name the four pillars of OOPs.

**Answer** :
The four pillars of Object-Oriented Programming are:




1.  Encapsulation
2.  Inheritance
1.   Polymorphism
2.   Abstraction

Q3. Explain why the __init__() function is used. Give a suitable example.

**Answer** :
The __init__() function is the constructor in Python. It is automatically called when an object is created. It is used to initialize the attributes of a class.

**Example**:
"""

class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        return f"Hi, I am {self.name} and I am {self.age} years old."

# Create an object
student = Student("Alice", 21)
print(student.greet())

"""Q4. Why is self used in OOPs?

**Answer** :
The self keyword is used in Python to represent the instance of a class. It is used to access attributes and methods of the class in Python. It allows each object to maintain its own state.

**Example**:
"""

class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius ** 2

# Create an object
circle = Circle(5)
print(circle.area())

"""Q5. What is inheritance? Give an example for each type of inheritance.

**Answer**

Inheritance is a mechanism in OOP where one class can derive the properties and methods of another class. It allows code reuse and the creation of a hierarchical structure.



1.  Single Inheritance:


"""

class Parent:
    def func1(self):
        return "This is a parent method."

class Child(Parent):
    def func2(self):
        return "This is a child method."

obj = Child()
print(obj.func1())
print(obj.func2())

"""


2.  Multiple Inheritance:

"""

class Class1:
    def method1(self):
        return "Method from Class1."

class Class2:
    def method2(self):
        return "Method from Class2."

class Derived(Class1, Class2):
    pass

obj = Derived()
print(obj.method1())
print(obj.method2())

"""


3.   Multilevel Inheritance:




"""

class Grandparent:
    def func1(self):
        return "Grandparent method."

class Parent(Grandparent):
    def func2(self):
        return "Parent method."

class Child(Parent):
    def func3(self):
        return "Child method."

obj = Child()
print(obj.func1())
print(obj.func2())
print(obj.func3())

"""

4. Hierarchical Inheritance:

"""

class Parent:
    def func1(self):
        return "Parent method."

class Child1(Parent):
    def func2(self):
        return "Child1 method."

class Child2(Parent):
    def func3(self):
        return "Child2 method."

obj1 = Child1()
obj2 = Child2()
print(obj1.func1())
print(obj2.func1())

"""
5.   Hybrid Inheritance: (Combines two or more types of inheritance.)

"""

class Base:
    def base_func(self):
        return "Base method."

class Derived1(Base):
    def derived1_func(self):
        return "Derived1 method."

class Derived2(Base):
    def derived2_func(self):
        return "Derived2 method."

class Hybrid(Derived1, Derived2):
    pass

obj = Hybrid()
print(obj.base_func())
print(obj.derived1_func())
print(obj.derived2_func())